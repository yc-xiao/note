1.新建
    django-admin.py startproject d_project
2.新建app
    django-admin.py startapp d_app
3.目录结构
    d_project
        d_project
            settings.py
            ...
        d_app
            admin.py
            ...
4.路由配置需要注意url() path() re_path()

5.Django规定，如果要使用模型，必须要创建一个app。

django-model
    python manage.py makemigrations app_name
    python manage.py migrate app_name (0001,可指定版本回退)

    django做了
        1.根据model在app下面的migrations文件夹生成文件。(用于记录当前模型结构，被migrate命令使用)
        2.migrate默认读取最新的版本更新到数据库，如果更新成功(表结构同模型一致)，则记录到django_migrations。
        (更新前，会对比数据库与migrations文件夹下的文件)
    当migrations文件夹丢失时(操作前需要备份数据，非正常操作):
        1.清空migrations文件下的版本文件，重新生成版本文件(0001)。(需确保模型与数据表字段一致，否则数据库migrate失败)
        2.删除数据库migrations表内对应app的版本文件，只留下0001文件。
        若数据库无0001文件，执行migrate时会报错(表已存在，模型与数据表不一致)
        测试时，因为版本1在数据库中，更新会报错(无修改，可以新增某个字段生产版本2进行测试migrate）

django时间处理
    # 时区处理
        from django.utils import timezone
        timezone.localtime(created_time)

    cur_time = datetime.datetime.now()
    five_day = cur_time + datetime.timedelta(hours=24*5)
    expired = Model.objects.filter(time__lte=cur_time) # 超过当前时间
    expired = Model.objects.filter(time__gte=cur_time, time__lte=five_day) # 当前到五天后范围

